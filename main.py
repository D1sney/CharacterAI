from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import filters
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.types.web_app_info import WebAppInfo
import json
import aiohttp
import asyncio
from config import host, user, password, db_name, TOKEN_API, endpoint, url # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ config –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
import pymysql
from datetime import datetime

start_text = '''<i><b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ –º–∏—Ä–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –æ–±—â–µ–Ω–∏–π! –Ø —Ç–≤–æ–π –±–æ—Ç, –≥–¥–µ —Ç—ã —Å–∞–º –≤—ã–±–∏—Ä–∞–µ—à—å, —Å –∫–µ–º –æ–±—â–∞—Ç—å—Å—è. –í –º–æ–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –∞—Ä—Å–µ–Ω–∞–ª–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –∫–∞–∂–¥—ã–π —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º, –∑–Ω–∞–Ω–∏—è–º–∏ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º.üßúüèΩ‚Äç‚ôÄÔ∏è

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏, —Å –∫–µ–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–æ–±—â–∞—Ç—å—Å—è. –ú–æ–∂–µ—à—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å –ú–∞—Ä–∏–æ –∏–∑ –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞ –ì—Ä–∏–±–æ–≤, –≠–π–Ω—à—Ç–µ–π–Ω–æ–º —Å –µ–≥–æ –≥–µ–Ω–∏–∞–ª—å–Ω—ã–º–∏ –∏–¥–µ—è–º–∏, –∏ —ç—Ç–æ –¥–∞–ª–µ–∫–æ –Ω–µ –≤—Å–µ!üê¢

–ö–∞–∂–¥—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ–º—ã –∏–ª–∏ –¥–∞–∂–µ –≤–∫–ª—é—á–∏—Ç—å—Å—è –≤ —Ä–æ–ª–µ–≤—É—é –∏–≥—Ä—É. –ü–æ–≥—Ä—É–∑–∏—Å—å –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä —Å —Ç–µ–º, –∫—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å–º–µ–Ω–∏—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∏ –º—ã –ø–µ—Ä–µ–Ω–µ—Å–µ–º—Å—è –≤ –¥—Ä—É–≥–æ–π –º–∏—Ä. –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –í—ã–±–∏—Ä–∞–π —Å–≤–æ–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏ –ø–æ–≥–Ω–∞–ª–∏!ü¶πüèº‚Äç‚ôÄÔ∏è</b></i>'''
mario_text = '<i><b>–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∂–∏—â–µ! –ú–∞–º–∞-–º–∏—è, —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è!\n–Ø ‚Äî –ú–∞—Ä–∏–æ üçÑ, –≥–µ—Ä–æ–π –∏–∑ –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞ –ì—Ä–∏–±–æ–≤. –í–µ—Å–µ–ª–æ, —á—Ç–æ —Ç—ã –∑–¥–µ—Å—å!\n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å. –ü–æ–µ—Ö–∞–ª–∏ –∫ –Ω–æ–≤—ã–º –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º –≤–º–µ—Å—Ç–µ!\n–í–ø–µ—Ä—ë–¥ –∫ –∑–≤—ë–∑–¥–∞–º!‚ú®</b></i>'
enstain_text = '<i><b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –º–æ–π –¥—Ä—É–≥!\n–Ø ‚Äî –≠–π–Ω—à—Ç–µ–π–Ω üß†, –∏ —Ä–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —É–º–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞. –ü–æ–º–Ω–∏, —á—Ç–æ —Ñ–∞–Ω—Ç–∞–∑–∏—è –≤–∞–∂–Ω–µ–µ –∑–Ω–∞–Ω–∏—è, –∏ –≤–æ–ø—Ä–æ—Å—ã –ª—É—á—à–µ –æ—Ç–≤–µ—Ç–æ–≤.\n–î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞–≥–∞–¥–∫–∏ –≤—Å–µ–ª–µ–Ω–Ω–æ–π –∏ –¥–µ–ª–∏—Ç—å—Å—è –∏–¥–µ—è–º–∏.\n–ü—É—Å—Ç—å —Ç–≤–æ–π –¥–µ–Ω—å –±—É–¥–µ—Ç —Ç–∞–∫–∏–º –∂–µ —è—Ä–∫–∏–º, –∫–∞–∫ —Å–≤–µ—Ç –∏–¥–µ–∏ –≤ –º–æ–µ–π –≥–æ–ª–æ–≤–µ!üí°</b></i>'

def sql_add_user(user_id, username, name, surname, time):
    conn = None
    try:
        conn = pymysql.connect(
            host = host,
            port = 3306,
            user = user,
            password = password,
            database = db_name,
            cursorclass = pymysql.cursors.DictCursor
        )       
        # cur = conn.cursor
        with conn.cursor() as cur:
            cur.execute('''CREATE TABLE IF NOT EXISTS users (user_id BIGINT PRIMARY KEY NOT NULL,
                        username TEXT,
                        name TEXT,
                        surname TEXT,
                        time DATETIME,
                        messages JSON)''') # –í–∞–∂–Ω–æ –¥–ª—è user_id —É—Ç–æ—á–Ω–∏—Ç—å BIGINT –ø–æ—Ç–æ–º—É —á—Ç–æ user_id –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (2147483647) –¥–ª—è INT
        try:               
            with conn.cursor() as cur:
                cur.execute(f'''INSERT INTO users (user_id, username, name, surname, time)
                VALUES (%s, %s, %s, %s, %s)''', (user_id, username, name, surname, time))
            conn.commit()
        except pymysql.IntegrityError as e:
            print(e)
    except Exception as ex:
        print(ex)
        print('–æ—à–∏–±–∫–∞ –∑–¥–µ—Å—å')
    finally:
        # –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ, —Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
        if conn != None:
            conn.close()



def sql_donwload_dialog(user_id):
    conn = None
    try:
        conn = pymysql.connect(
            host = host,
            port = 3306,
            user = user,
            password = password,
            database = db_name,
            cursorclass = pymysql.cursors.DictCursor
        )       
        # cur = conn.cursor
        with conn.cursor() as cur:
            cur.execute(f'''SELECT messages FROM users WHERE user_id = %s''', (user_id,))
            return cur.fetchone()
    except Exception as ex:
        print(ex)
    finally:
        # –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ, —Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
        if conn != None:
            conn.close()



def sql_add_dialog(user_id, messages):
    conn = None
    try:
        conn = pymysql.connect(
            host = host,
            port = 3306,
            user = user,
            password = password,
            database = db_name,
            cursorclass = pymysql.cursors.DictCursor
        )       
        # cur = conn.cursor                      
        with conn.cursor() as cur:
            cur.execute(f'''UPDATE users SET messages = %s WHERE user_id = %s''', (messages, user_id))
        conn.commit()
    except Exception as ex:
        print(ex)
    finally:
        # –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ, —Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
        if conn != None:
            conn.close()



async def fetch_completion(messages):
    messages = messages
    headers = {
        'accept': 'application/json',
        'Content-Type': 'application/json'
    }
    data = {
        'model': 'gpt-3.5-turbo',
        'messages': messages,
    }
    data = json.dumps(data)
    async with aiohttp.ClientSession() as session:
        async with session.post(endpoint, headers=headers, data=data) as response:
            return await response.json()



storage = MemoryStorage()
bot = Bot(TOKEN_API)
dp = Dispatcher(bot, storage=storage)

class Dialogs(StatesGroup):
    mario = State()
    enstain = State()



def start_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –≤–µ–± —Å—Ç—Ä–∞–Ω–∏—Ü—É', web_app=WebAppInfo(url=url)))
    return kb



@dp.message_handler(commands=['start'], state='*')
async def start_command(message: types.Message, state: FSMContext):
    await state.reset_state()
    sql_add_user(message.from_user.id, message.from_user.username, message.from_user.first_name, message.from_user.last_name, datetime.now())
    await bot.send_message(message.from_user.id, text=start_text, reply_markup=start_keyboard(), parse_mode='HTML')



@dp.message_handler(commands=['menu'], state='*')
async def menu_command(message: types.Message, state: FSMContext):
    await state.reset_state()
    await bot.send_message(message.from_user.id, text=f'<i><b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ü¶ñ</b></i>', reply_markup=start_keyboard(), parse_mode='HTML')



@dp.message_handler(content_types=['web_app_data'], state='*')
async def wep_app(message: types.Message, state: FSMContext):
    user_choose = message.web_app_data.data
    if user_choose == 'mario':
        await bot.send_message(message.from_user.id, text=mario_text, parse_mode='HTML', reply_markup=ReplyKeyboardRemove())
        await Dialogs.mario.set()
        sql_add_dialog(message.from_user.id, None) # –≤–∞–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    elif user_choose == 'enstain':
        await bot.send_message(message.from_user.id, text=enstain_text, parse_mode='HTML', reply_markup=ReplyKeyboardRemove())
        await Dialogs.enstain.set()
        sql_add_dialog(message.from_user.id, None)



@dp.message_handler(state=Dialogs.mario)
async def text_to_mario(message: types.Message, state: FSMContext):
    messages = sql_donwload_dialog(message.from_user.id)['messages']
    # –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –ø—É—Å—Ç–æ–π —Ç–æ –º—ã —Å–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è —Ç–æ –º—ã –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–≥–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if messages == None:
        messages = [
                {"role": "system", "content": "Instructions: –¢—ã –ú–∞—Ä–∏–æ"},
                {"role": "user", "content": message.text}
            ]
    else:
        messages = json.loads(messages)
        messages.append({"role": "user", "content": message.text})
    answer = await fetch_completion(messages)
    answer_message = answer['choices'][0]['message']
    messages.append(answer_message)
    string_messages = json.dumps(messages)
    sql_add_dialog(message.from_user.id, string_messages)
    await bot.send_message(message.from_user.id, text=f'<i><b>{answer_message["content"]}</b></i>', parse_mode='HTML')



@dp.message_handler(state=Dialogs.enstain)
async def text_to_enstain(message: types.Message, state: FSMContext):
    messages = sql_donwload_dialog(message.from_user.id)['messages']
    # –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –ø—É—Å—Ç–æ–π —Ç–æ –º—ã —Å–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è —Ç–æ –º—ã –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–≥–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if messages == None:
        messages = [
                {"role": "system", "content": "Instructions: –¢—ã –ê–ª—å–±–µ—Ä—Ç –≠–π–Ω—à—Ç–µ–π–Ω"},
                {"role": "user", "content": message.text}
            ]
    else:
        messages = json.loads(messages)
        messages.append({"role": "user", "content": message.text})
    answer = await fetch_completion(messages)
    answer_message = answer['choices'][0]['message']
    messages.append(answer_message)
    string_messages = json.dumps(messages)
    sql_add_dialog(message.from_user.id, string_messages)
    await bot.send_message(message.from_user.id, text=f'<i><b>{answer_message["content"]}</b></i>', parse_mode='HTML')



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)